
#!/usr/bin/env python3
"""
Debug script to analyze antibody sequences used in isotype modeling tests.
"""

import sys
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(name)s:%(message)s')

# Add the workspace directory to Python path
sys.path.append('/a0/bitcore/workspace')

# Import the isotype modeling module
from bioinformatics.modules.isotype_modeling import extract_sequence_features, ISOTYPES, CONSTANT_REGION_MOTIFS

# Test sequences from the unit tests
IGG_SEQUENCE = "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSSISGSGGSTYYADSVKGRFTISRDNSKNTLFLQMNSLRAEDTAVYYCARDPYRGFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKRVEPKSCDKTHTCPPCPAPELLGGPSVFLFPPKPKDTLMISRTPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGK"

IGA_SEQUENCE = "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSSISGSGGSTYYADSVKGRFTISRDNSKNTLFLQMNSLRAEDTAVYYCARDPYRGFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKRVEPKSCDKTHTCPPCPAPNTPPTPSPSCGKSCDKTHTCPPCPAPELLGGPSVFLFPPKPKDTLMISRTPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGK"

IGM_SEQUENCE = "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSSISGSGGSTYYADSVKGRFTISRDNSKNTLFLQMNSLRAEDTAVYYCARDPYRGFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKRVEPKSCDKTHTCPPCPAPELLGGPSVFLFPPKPKDTLMISRTPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGKLLGLCLLCGLLAVFVIGS"

IGE_SEQUENCE = "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSSISGSGGSTYYADSVKGRFTISRDNSKNTLFLQMNSLRAEDTAVYYCARDPYRGFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKRVEPKSCDKTHTCPPCPAPELLGGPSVFLFPPKPKDTLMISRTPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGKLLGLCLLCGLLAVFVIGSIKRRSG"

IGD_SEQUENCE = "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSSISGSGGSTYYADSVKGRFTISRDNSKNTLFLQMNSLRAEDTAVYYCARDPYRGFDYWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKRVEPKSCDKTHTCPPCPAPELLGGPSVFLFPPKPKDTLMISRTPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGKGQPREPQVYTLPP"

# Analyze each sequence
sequences = {
    'IgG': IGG_SEQUENCE,
    'IgA': IGA_SEQUENCE,
    'IgM': IGM_SEQUENCE,
    'IgE': IGE_SEQUENCE,
    'IgD': IGD_SEQUENCE
}

print("Analyzing antibody sequences for isotype modeling tests
")

for isotype, sequence in sequences.items():
    print(f"{isotype} SEQUENCE (length: {len(sequence)}):")
    print(f"{sequence}
")

    # Extract features
    features = extract_sequence_features(sequence)

    print(f"Features for {isotype}:")
    for feature_type, feature_list in features.items():
        print(f"  {feature_type}: {feature_list}")

    # Check which motifs from this isotype are present
    print(f"  Expected {isotype} motifs present:")
    for motif in CONSTANT_REGION_MOTIFS[isotype]:
        if any(motif in f for f in features['motifs']):
            print(f"    ✓ {motif}")
        else:
            print(f"    ✗ {motif}")

    print("
" + "-" * 50 + "
")

# Summary of motif presence
print("SUMMARY OF MOTIF PRESENCE:
")
for isotype in ISOTYPES:
    print(f"{isotype}:")
    for other_isotype in ISOTYPES:
        matching_motifs = []
        for motif in CONSTANT_REGION_MOTIFS[other_isotype]:
            if any(motif in f for f in features['motifs']):
                matching_motifs.append(motif)
        if matching_motifs:
            print(f"  Has {other_isotype} motifs: {matching_motifs}")
    print()
